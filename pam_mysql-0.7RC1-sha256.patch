--- pam_mysql-0.7RC1.orig/pam_mysql.c	2006-01-09 21:35:59.000000000 +1100
+++ pam_mysql-0.7RC1/pam_mysql.c	2015-01-06 20:01:36.036985918 +1100
@@ -624,9 +624,34 @@
 
 	return md;
 }
+
+#define HAVE_PAM_MYSQL_SHA256_DATA
+static char *pam_mysql_sha256_data(const unsigned char *d, unsigned int sz, char *md)
+{
+        size_t i, j;
+        unsigned char buf[32];
+
+        if (md == NULL) {
+                if ((md = xcalloc(64 + 1, sizeof(char))) == NULL) {
+                        return NULL;
+                }
+        }
+
+        SHA256(d, (unsigned long)sz, buf);
+
+        for (i = 0, j = 0; i < 32; i++, j += 2) {
+                md[j + 0] = "0123456789abcdef"[(int)(buf[i] >> 4)];
+                md[j + 1] = "0123456789abcdef"[(int)(buf[i] & 0x0f)];
+        }
+        md[j] = '\0'; syslog(LOG_AUTHPRIV | LOG_ERR, PAM_MYSQL_LOG_PREFIX "SHA256 digest: %s", md);
+
+        return md;
+}
+
 #endif
 /* }}} */
 
+
 /* {{{ option handlers */
 /* {{{ pam_mysql_string_opt_getter */
 static pam_mysql_err_t pam_mysql_string_opt_getter(void *val, const char **pretval, int *to_release)
@@ -701,6 +726,10 @@
 			*pretval = "sha1";
 			break;
 
+                case 5:
+                        *pretval = "sha256";
+                        break;
+
 		default:
 			*pretval = NULL;
 	}
@@ -736,6 +765,11 @@
 		*(int *)val = 4;
 		return PAM_MYSQL_ERR_SUCCESS;
 	}
+        if (strcmp(newval_str, "5") == 0 || strcasecmp(newval_str, "sha256") == 0) {
+                *(int *)val = 5;
+                return PAM_MYSQL_ERR_SUCCESS;
+        }
+
 
 	*(int *)val = 0;
 
@@ -2696,6 +2730,21 @@
 #endif
 				} break;
 
+                                case 5: {
+#ifdef HAVE_PAM_MYSQL_SHA256_DATA
+                                        char buf[65];
+                                        pam_mysql_sha256_data((unsigned char*)passwd, strlen(passwd),
+                                                        buf);
+                                        vresult = strcmp(row[0], buf);
+                                        {
+                                                char *p = buf - 1;
+                                                while (*(++p)) *p = '\0';
+                                        }
+#else
+                                        syslog(LOG_AUTHPRIV | LOG_ERR, PAM_MYSQL_LOG_PREFIX "non-crypt()ish SHA256 hash is not supported in this build.");
+#endif
+                                } break;
+
 				default: {
 				}
 			}
@@ -2882,6 +2931,22 @@
 #endif
 				break;
 
+                        case 5:
+#ifdef HAVE_PAM_MYSQL_SHA256_DATA
+                                if (NULL == (encrypted_passwd = xcalloc(64 + 1, sizeof(char)))) {
+                                        syslog(LOG_AUTHPRIV | LOG_CRIT, PAM_MYSQL_LOG_PREFIX "allocation failure at " __FILE__ ":%d", __LINE__);
+                                        err = PAM_MYSQL_ERR_ALLOC;
+                                        goto out;
+                                }
+                                pam_mysql_sha256_data((unsigned char*)new_passwd,
+                                                strlen(new_passwd), encrypted_passwd);
+#else
+                                syslog(LOG_AUTHPRIV | LOG_ERR, PAM_MYSQL_LOG_PREFIX "non-crypt()ish SHA256 hash is not supported in this build.");
+                                err = PAM_MYSQL_ERR_NOTIMPL;
+                                goto out;
+#endif
+                                break;
+
 			default:
 				encrypted_passwd = NULL;
 				break;
